localrules: REMOVE_DNA_FROM_CIF_AND_SAVE_AS_PDB, PREPARE_COMBFOLD_INPUT, PREPARE_TEMPLATES_AF2, SANITISE_NAMES
from Bio import SeqIO
import os
import string 
import shutil

def get_af3_flag_value(flag, default_value):
    return config.get('alphafold3_flags', {}).get(flag, default_value)

def sanitise_name(name):
    """Returns sanitised version of the name that can be used as a filename."""
    lower_spaceless_name = name.lower().replace(' ', '_')
    allowed_chars = set(string.ascii_lowercase + string.digits + '_-.')
    return ''.join(l for l in lower_spaceless_name if l in allowed_chars)


TEMPLATES_DIR = config["templates_dir"]
OUTDIR = config["output_dir"]
INPUT_FASTA = config["input_fasta"]
AF_UNMASKED_CONTAINER = config["af_unmasked_container"]

#TEMPLATES, SEQ_IDS, = glob_wildcards(os.path.join(OUTDIR,"rule_PREPARE_AF_UNMAKSED_INPUTS", "{template}","{seq_id}_{template}.fasta"))
SEQ_IDS = list(SeqIO.to_dict(SeqIO.parse(INPUT_FASTA,"fasta")).keys())
TEMPLATES, = glob_wildcards(os.path.join(TEMPLATES_DIR, "{template}.pdb"))
SANITISED_TEMPLATES = ",".join([sanitise_name(t) for t in TEMPLATES])
SANITISED_SEQ_IDS = [sanitise_name(s) for s in SEQ_IDS]

AF3_CONTAINER = config["af3_flags"]["--af3_container"]

# COMBFOLD FLAGS
STOICHIO = config["stoichio"]
UNIFORM_COPIES = "-u" if config["uniform_copies"]=="true" else ""
COMBFOLD_CONTAINER = config["combfold_container"]
print("COMBFOLD FLAGS")
print("UNIFORM_COPIES=",UNIFORM_COPIES)
print("STOICHIO=",STOICHIO)
#print("COMBFOLD_CONTAINER=",COMBFOLD_CONTAINER)
# IS_SELECTED_BY_COMBFOLD = IMPLEMENT

def get_rule_RUN_COMBFOLD_ASSEMBLY(wildcards):
    ck_outputs = checkpoints.PREPARE_COMBFOLD_INPUT.get(**wildcards).output[0]
    print("get_rule_RUN_COMBFOLD_ASSEMBLY=",ck_outputs)
    TEMPLATES, COMBINATIONS, = glob_wildcards(os.path.join(ck_outputs, "{template}","{comb}.json"))
    return expand(os.path.join(OUTDIR,"rule_RUN_COMBFOLD_ASSEMBLY","{template}","{comb}","assembled_results","confidence.txt"), template = TEMPLATES , comb = COMBINATIONS)

def get_rule_PREPARE_TEMPLATES_AF2(wildcards):
    ck_outputs = checkpoints.PREPARE_AF_UNMAKSED_INPUTS.get(**wildcards).output[0]
    print("get_rule_AF2_DATA_PLUS_INFERENCE=",ck_outputs)
    TEMPLATES, SEQ_IDS, = glob_wildcards(os.path.join(ck_outputs, "{template}","{seq_id}_{template}.fasta"))
    return expand(os.path.join(OUTDIR,"rule_PREPARE_TEMPLATES_AF2","{template}","{seq_id}_{template}","fold_input.json"), template = TEMPLATES , seq_id = SEQ_IDS)

def get_rule_PREPARE_COMBFOLD_INPUT(wildcards):
    ck_outputs = checkpoints.PREPARE_COMBFOLD_INPUT.get(**wildcards).output[0]
    print("get_rule_PREPARE_COMBFOLD_INPUT=",ck_outputs)
    TEMPLATES, COMBINATIONS, = glob_wildcards(os.path.join(ck_outputs, "{template}","{comb}.json"))
    return expand(os.path.join(ck_outputs,"{template}", "{comb}.json"), comb = COMBINATIONS, template = TEMPLATES) 

def get_rule_PREPARE_AF_UNMAKSED_INPUTS(wildcards):
    ck_outputs = checkpoints.PREPARE_AF_UNMAKSED_INPUTS.get(**wildcards).output[0]
    print("get_rule_AF2_DATA_PLUS_INFERENCE=",ck_outputs)
    TEMPLATES, SEQ_IDS, = glob_wildcards(os.path.join(ck_outputs, "{template}","{seq_id}_{template}.fasta"))
    return expand(os.path.join(ck_outputs,"{template}","{seq_id}_{template}.fasta"), template = TEMPLATES , seq_id = SEQ_IDS)

def get_rule_AF2_DATA_PLUS_INFERENCE(wildcards):
    ck_outputs = checkpoints.SANITISE_NAMES.get(**wildcards).output[0]
    print("get_rule_AF2_DATA_PLUS_INFERENCE=",ck_outputs)
    TEMPLATES, SEQ_IDS, = glob_wildcards(os.path.join(ck_outputs, "{template}","{seq_id}_{template}.fasta"))
    return expand(os.path.join(OUTDIR,"rule_COLLECT_TOP_PREDICTIONS","{template}","{seq_id}_{template}_ranked_0.pdb"), template = TEMPLATES , seq_id = SEQ_IDS)

rule all:
    input:
        get_rule_AF2_DATA_PLUS_INFERENCE,
        get_rule_PREPARE_COMBFOLD_INPUT,
        get_rule_RUN_COMBFOLD_ASSEMBLY

checkpoint PREPARE_AF_UNMAKSED_INPUTS:
    input:
        fasta = INPUT_FASTA,        
    params:
        templates_dir = TEMPLATES_DIR,        
    output:
        directory(os.path.join(OUTDIR,"rule_PREPARE_AF_UNMAKSED_INPUTS"))
    shell:
        """
        python workflow/scripts/prepare_csv_from_fasta.py {input.fasta} --output-dir {output} -t {params.templates_dir} 
        """

checkpoint SANITISE_NAMES:
    input:
        get_rule_PREPARE_AF_UNMAKSED_INPUTS
    output:
        directory(os.path.join(OUTDIR,"rule_SANITISE_NAMES"))
    run:
        for f in input:
            outdir = os.path.join(output[0],os.path.basename(os.path.dirname(f)))
            os.makedirs(outdir, exist_ok=True)
            insane_name = os.path.splitext(os.path.basename(f))[0]
            sanitised_name = sanitise_name(insane_name)
            sanitised_output = os.path.join(outdir,sanitised_name+".fasta")        
            shutil.copy(f, sanitised_output)


rule PREPARE_TEMPLATES_AF2:
    input:
        fasta = os.path.join(OUTDIR,"rule_SANITISE_NAMES", "{template}","{seq_id}_{template}.fasta"),
        structure = os.path.join(TEMPLATES_DIR, "{template}.pdb")
    container:
        AF_UNMASKED_CONTAINER
    output:
        os.path.join(OUTDIR,"rule_PREPARE_TEMPLATES_AF2","{template}","{seq_id}_{template}","template_data","templates.flag")
    shell:
        """
        CHAIN_INFO=$(python /app/utils/chain_pair_generator.py {wildcards.seq_id} | tr '[:lower:]' '[:upper:]')
        echo $CHAIN_INFO
        TARGET_CHAINS=$(echo "$CHAIN_INFO" |  cut -d'-' -f2 | xargs)
        TEMPLATE_CHAINS=$(echo "$CHAIN_INFO" | cut -d'-' -f1 | xargs)
        echo $TARGET_CHAINS
        echo $TEMPLATE_CHAINS
        python /app/alphafold/prepare_templates.py --target {input.fasta} \
        --template {input.structure} \
        --output_dir {OUTDIR}/rule_PREPARE_TEMPLATES_AF2/{wildcards.template} \
        --target_chains $TARGET_CHAINS \
        --template_chains $TEMPLATE_CHAINS
        """


rule AF2_DATA_PLUS_INFERENCE:
    input:
        os.path.join(OUTDIR,"rule_PREPARE_TEMPLATES_AF2","{template}","{seq_id}_{template}","template_data","templates.flag")
    output:
        os.path.join(OUTDIR,"rule_AF2_DATA_PLUS_INFERENCE","{template}","{seq_id}_{template}","ranked_0.pdb")
    container:
        AF_UNMASKED_CONTAINER
    shell:
        """
        python /app/alphafold/run_alphafold.py \
        --fasta_paths=/root/af_output/rule_SANITISE_NAMES/{wildcards.template}/{wildcards.seq_id}_{wildcards.template}.fasta \
        --flagfile databases_full.flag \
        --flagfile /root/af_output/rule_PREPARE_TEMPLATES_AF2/{wildcards.template}/{wildcards.seq_id}_{wildcards.template}/template_data/templates.flag \
        --output_dir=/root/af_output/rule_AF2_DATA_PLUS_INFERENCE/{wildcards.template} \
        --cross_chain_templates \
        --models_to_use=model_5_multimer_v2,model_5_multimer_v3 \
        --separate_homomer_msas
        """

# touch missing output files due to a bug, presumably in af_unmasked for alphafold 3


rule COLLECT_TOP_PREDICTIONS:
    input:
        os.path.join(OUTDIR,"rule_AF2_DATA_PLUS_INFERENCE","{template}","{seq_id}_{template}","ranked_0.pdb")
    output:
        os.path.join(OUTDIR,"rule_COLLECT_TOP_PREDICTIONS","{template}","{seq_id}_{template}_ranked_0.pdb")
    shell:
        """
        cp {input} {output}
        """

checkpoint PREPARE_COMBFOLD_INPUT:
    input:
        fasta = INPUT_FASTA,        
    params:
        stoichio = STOICHIO,
        uniform_copies = UNIFORM_COPIES,
        sanitised_templates = SANITISED_TEMPLATES 
    output:
        directory(os.path.join(OUTDIR,"rule_PREPARE_COMBFOLD_INPUT"))
    shell:
        """
        python workflow/scripts/create_combfold_input_jsons.py {input.fasta} {params.stoichio} {params.uniform_copies} -d {OUTDIR}/rule_PREPARE_COMBFOLD_INPUT -t {params.sanitised_templates}
        """


rule RUN_COMBFOLD_ASSEMBLY:
    input:
        subunits_json = os.path.join(OUTDIR,"rule_PREPARE_COMBFOLD_INPUT","{template}","{comb}.json"),
        pdbs = get_rule_AF2_DATA_PLUS_INFERENCE
#        pdbs = expand(os.path.join(OUTDIR,"rule_REMOVE_DNA_FROM_CIF_AND_SAVE_AS_PDB","{template}","{seq_id}_{template}_model.pdb"),template = SANITISED_TEMPLATES.split(","), seq_id = SANITISED_SEQ_IDS),
    output:
        os.path.join(OUTDIR,"rule_RUN_COMBFOLD_ASSEMBLY","{template}","{comb}","assembled_results","confidence.txt")
    container:
        COMBFOLD_CONTAINER
    shell:
        """
        rm -rf {OUTDIR}/rule_RUN_COMBFOLD_ASSEMBLY/{wildcards.template}/{wildcards.comb}
        python /app/CombFold-master/scripts/run_on_pdbs.py \
        {input.subunits_json} \
        {OUTDIR}/rule_REMOVE_DNA_FROM_CIF_AND_SAVE_AS_PDB/{wildcards.template} \
        {OUTDIR}/rule_RUN_COMBFOLD_ASSEMBLY/{wildcards.template}/{wildcards.comb}
        """
